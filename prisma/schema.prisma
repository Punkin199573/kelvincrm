// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  role              String   @default("guest") // guest, fan, premium, admin
  stripeCustomerId  String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  orders            Order[]
  meetGreetBookings MeetGreetBooking[]
  adminSessions     AdminSession[]
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String
  category    String?
  stock       Int         @default(0)
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  orderItems  OrderItem[]
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  stripeSessionId String      @unique
  totalAmount     Float
  status          String      @default("pending") // pending, completed, cancelled
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  name      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  location    String
  price       Float    @default(0)
  isMeetGreet Boolean  @default(false)
  maxAttendees Int     @default(50)
  currentAttendees Int @default(0)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  bookings    MeetGreetBooking[]
}

model MeetGreetBooking {
  id            String   @id @default(cuid())
  userId        String
  eventId       String
  sessionType   String   // group, private_whatsapp, private_facetime, private_video
  status        String   @default("confirmed") // confirmed, completed, cancelled
  dailyRoomUrl  String?
  scheduledAt   DateTime
  duration      Int      @default(30) // minutes
  price         Float    @default(0)
  specialRequests String?
  contactInfo   Json?    // Store WhatsApp, Apple ID, etc.
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id])
  event         Event    @relation(fields: [eventId], references: [id])
  adminSessions AdminSession[]
}

model AdminSession {
  id                String   @id @default(cuid())
  adminId           String
  meetGreetBookingId String
  joinedAt          DateTime @default(now())
  leftAt            DateTime?
  sessionNotes      String?
  
  admin             User     @relation(fields: [adminId], references: [id])
  meetGreetBooking  MeetGreetBooking @relation(fields: [meetGreetBookingId], references: [id])
}

model Content {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   // blog, video, audio, image
  url         String?
  accessLevel String   @default("guest") // guest, fan, premium
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MembershipTier {
  id              String @id @default(cuid())
  name            String @unique
  price           Float
  stripePriceId   String @unique
  features        Json
  active          Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
